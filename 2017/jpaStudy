java persistence API.
ORM------object ralation mapping.
reasons of JPA appear:
          1\redundance of code.
          2\databass of connection
          3\System achitecture.
          4\performance problem.
    advantage point:
           1\standard
           2\for container a charactity support.
           3\simply
           4\a same as jdbc select.
           5\object oriented
    <persistence xmlns="http://java.sun.com/xml/ns/persistence"  
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
        xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_version=1">  
        <persistence-unit name="mysqlJPA" transaction-type="RESOURCE_LOCAL">  
            <properties>  
                <property name="hibernate.dialect" value="org.hibernate.dialect.MySQL5Dialect" />  
                <property name="hibernate.connection.driver_class" value="com.mysql.jdbc.Driver" />  
                <property name="hibernate.connection.username" value="root" />  
                <property name="hibernate.connection.password" value="123456" />  
                <property name="hibernate.connection.url" value="jdbc:mysql://localhost:3306/db1" />  
                <property name="hibernate.max_fetch_depth" value="3" />  
                <property name="hibernate.hbm2ddl.auto" value="update" />  
            </properties>  
        </persistence-unit>  
    </persistence>  

anocation:@entity @column
    package junit.test;  
      
      
    import javax.persistence.EntityManager;  
    import javax.persistence.EntityManagerFactory;  
    import javax.persistence.Persistence;  
      
    import org.junit.BeforeClass;  
    import org.junit.Test;  
      
    import com.hmk.bean.Person;  
      
    public class JpaTest {  
      
        @BeforeClass  
        public static void setUpBeforeClass() throws Exception {  
        }  
          
        @Test public void createTable(){  
            //可以验证生成表是否正确  
            EntityManagerFactory factory = Persistence.createEntityManagerFactory("mysqlJPA");  
            factory.close();  
        }  
      
        @Test public void save(){  
            EntityManagerFactory factory = Persistence.createEntityManagerFactory("mysqlJPA");  
            EntityManager em = factory.createEntityManager();  
            em.getTransaction().begin();  
            Person person = new Person(); //person为new状态  
            person.setName("zhang san");  
            em.persist(person); //持久化实体  
            em.getTransaction().commit();  
            em.close();  
            factory.close();  
        }  
        //new 、托管、脱管、删除  
          
        @Test public void update(){  
            EntityManagerFactory factory = Persistence.createEntityManagerFactory("mysqlJPA");  
            EntityManager em = factory.createEntityManager();  
            em.getTransaction().begin();  
            Person person = em.find(Person.class, 1);  
            person.setName("hmk"); //person为托管状态  
            em.getTransaction().commit();  
            em.close();  
            factory.close();  
        }  
          
        @Test public void update2(){  
            EntityManagerFactory factory = Persistence.createEntityManagerFactory("mysqlJPA");  
            EntityManager em = factory.createEntityManager();  
            em.getTransaction().begin();  
            Person person = em.find(Person.class, 1);  
            em.clear(); //把实体管理器中的所有实体变为脱管状态  
            person.setName("hmk2");  
            em.merge(person); //把脱管状态变为托管状态,merge可以自动选择insert or update 数据  
            em.getTransaction().commit();  
            em.close();  
            factory.close();  
        }  
      
        @Test public void remove(){  
            EntityManagerFactory factory = Persistence.createEntityManagerFactory("mysqlJPA");  
            EntityManager em = factory.createEntityManager();  
            em.getTransaction().begin();  
            Person person = em.find(Person.class, 1);  
            em.remove(person); //删除实体  
            em.getTransaction().commit();  
            em.close();  
            factory.close();  
        }  
          
        @Test public void find(){  
            EntityManagerFactory factory = Persistence.createEntityManagerFactory("mysqlJPA");  
            EntityManager em = factory.createEntityManager();  
            Person person = em.find(Person.class, 2); //类似于hibernate的get方法,没找到数据时，返回null  
            System.out.println(person.getName());  
            em.close();  
            factory.close();  
        }  
        @Test public void find2(){  
            EntityManagerFactory factory = Persistence.createEntityManagerFactory("mysqlJPA");  
            EntityManager em = factory.createEntityManager();  
            Person person = em.getReference(Person.class, 2); //类似于hibernate的load方法,延迟加载.没相应数据时会出现异常  
            System.out.println(person.getName()); //真正调用时才查找数据  
            em.close();  
            factory.close();  
        }  
    }  
